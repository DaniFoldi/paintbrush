@use 'sass:string';
@forward './deprecated';


@mixin grid-center-items {
  display: grid;
  place-items: center;
}

@mixin rounded {
  border-radius: var(--radius);
}

@mixin fade($properties...) {
  $values: '';

  @each $property in $properties {
    $values: '#{$values} #{$property} 0.25s ease-in-out,';
  }

  // stylelint-disable-next-line function-no-unknown, order/order -- TODO remove
  transition: string.slice($values, 2, -2);
}


@mixin font($family) {
  @if $family == 'raleway' {
    font-family: Raleway, 'Helvetica Neue', sans-serif;
  } @else if $family == 'playfair' {
    font-family: 'Playfair Display', 'Times New Roman', sans-serif;
  } @else if $family == 'phosphor-icons' {
    // stylelint-disable-next-line font-family-no-missing-generic-family-keyword -- Icons do not have generic family
    font-family: Phosphor-icons;
  } @else if $family == 'inter' {
    font-family: Inter, Helvetica, Arial, sans-serif;
  }
}

@mixin size-max {
  min-height: 100%;
  min-width: 100%;
}

@mixin size-100 {
  height: 100%;
  width: 100%;
}

@mixin two-items {
  display: grid;
  gap: var(--unit);
  grid-template-columns: auto 1fr;
  grid-template-rows: auto;

  &:not(.flip) {

    & > :first-child {
      aspect-ratio: 1 / 1;
      place-self: center;
    }

    & > :not(:first-child) {
      align-self: center;
    }
  }

  &.flip {
    grid-template-columns: 1fr auto;

    & > :last-child {
      aspect-ratio: 1 / 1;
      place-self: center;
    }

    & > :not(:last-child) {
      align-self: center;
    }
  }
}

// stylelint-disable declaration-no-important -- Disable animations for motion reduction
@mixin reduced-motion {
  animation-duration: .01ms !important;
  animation-iteration-count: 1 !important;
  scroll-behavior: auto !important;
  transition-duration: .01ms !important;
}
// stylelint-enable declaration-no-important
